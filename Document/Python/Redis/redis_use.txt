Redis的适用场景

1.用作Session状态服务器
	大型的互联网的技术要求是
		高并发:
		高可用:
		高性能:
		大容量:
	这就要求系统需要有很好的伸缩性
		1).通过提高机器的CPU,内存,配置更好的机子,价格昂贵,而且性能有限,显然不是好办法
		2).另一种方式就是采用多台普通机器集群,让每台普通机器都贡献一份力量,并且这种
			集群方式理论上性能是无上限的可以根据需要任意加减机器,系统的可伸缩性得到很好的保证
			这是个好办法,这是个好办法
	Http协议是无状态的,而互联网WEB应用一般是有状态的即,Session服务
		1).应用程序的Session服务是基于JVM内存实现的,运行在其上面的WEB应用的有状态
			会话保存在JVM内存中
		2).应用状态保存在本应用节点,当后续同一会话的HTTP请求到来是,它必须落在同一应用节点
			否则访问不到原来的JVM会话,状态将消失
		3).会话粘滞模式(session sticky),本身的不足之处在于,首先要实现合适的负载均衡算法,
			既要高效,又要灵活均衡的分布会话,其次,互联网应用往往需要有高可用性,当一个节点失效时
			虽然前端的负载均衡器可以转移后续请求,但是会话状态无法转移
	****4).利用Redis实现状态服务器有以下优点:
			1.Redis支持Session结 key,value 的字典结构
			2.Redis支持键值的有效期特性因为Session是有有效期控制的
			3.Redis是基于内存的,满足互联网应用的高并发,高可用特性

		由图可知，Session服务器对外提供了一个接口，叫SessionManager。SessionManager处于web接入层，负责浏览器客户端会话标识与服务端会话之间关系维护，是应用使用Session功能的入口。

		Session服务的内部实现对应用来说，是看不见的。SessionManager提供了往会话中设置属性名称值对、根据属性名返回其属性值以及销毁整个会话等方法。

		SessionManagerImpl是其实现，SessionManagerImpl重要处理cookie中session标识与服务端session的对应关系，而session内容的具体存储管理交由另一个组件SessionRegistry负责。SessionManagerImpl


